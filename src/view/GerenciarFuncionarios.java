package view;

import dao.FuncionarioDAO;
import dao.FuncionarioServicoDAO;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Funcionario;
import model.Servico;

/**
 *
 * @author Luiz Alberto Teodoro de Arruda
 */
public class GerenciarFuncionarios extends javax.swing.JFrame {

    private final int NOME = 0;

    private ArrayList<Funcionario> funcionarios;
    private DefaultTableModel table;
    private boolean subList;
    private int position;

    /**
     * Creates new form GerenciarFuncionarios
     */
    public GerenciarFuncionarios() {
        initComponents();
        funcionarios = new FuncionarioDAO().queryAll();
        subList = false;
        position = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFuncionarios = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblProcurar = new javax.swing.JLabel();
        txtProcurar = new javax.swing.JTextField();
        bttProcurar = new javax.swing.JButton();
        lblFuncionarios = new javax.swing.JLabel();
        scrFuncionarios = new javax.swing.JScrollPane();
        tblFuncionarios = new javax.swing.JTable();
        bttCadastrar = new javax.swing.JButton();
        bttEditar = new javax.swing.JButton();
        bttExcluir = new javax.swing.JButton();
        bttVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlFuncionarios.setBackground(new java.awt.Color(255, 255, 255));
        pnlFuncionarios.setName("excluir"); // NOI18N
        pnlFuncionarios.setPreferredSize(new java.awt.Dimension(400, 512));

        lblTitulo.setBackground(new java.awt.Color(102, 0, 153));
        lblTitulo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Gerenciar Funcionários");
        lblTitulo.setOpaque(true);

        lblProcurar.setForeground(new java.awt.Color(102, 0, 153));
        lblProcurar.setText("Procurar funcionário:");

        bttProcurar.setBackground(new java.awt.Color(102, 0, 153));
        bttProcurar.setForeground(new java.awt.Color(255, 255, 255));
        bttProcurar.setText("Buscar");
        bttProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttProcurarActionPerformed(evt);
            }
        });

        lblFuncionarios.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblFuncionarios.setForeground(new java.awt.Color(102, 0, 153));
        lblFuncionarios.setText("Funcionários cadastrados:");

        tblFuncionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFuncionariosMouseClicked(evt);
            }
        });
        scrFuncionarios.setViewportView(tblFuncionarios);

        bttCadastrar.setBackground(new java.awt.Color(102, 0, 153));
        bttCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        bttCadastrar.setText("Cadastrar");
        bttCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttCadastrarActionPerformed(evt);
            }
        });

        bttEditar.setBackground(new java.awt.Color(102, 0, 153));
        bttEditar.setForeground(new java.awt.Color(255, 255, 255));
        bttEditar.setText("Editar");
        bttEditar.setEnabled(false);
        bttEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttEditarActionPerformed(evt);
            }
        });

        bttExcluir.setBackground(new java.awt.Color(102, 0, 153));
        bttExcluir.setForeground(new java.awt.Color(255, 255, 255));
        bttExcluir.setText("Excluir");
        bttExcluir.setEnabled(false);
        bttExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttExcluirActionPerformed(evt);
            }
        });

        bttVoltar.setBackground(new java.awt.Color(255, 255, 255));
        bttVoltar.setForeground(new java.awt.Color(102, 0, 153));
        bttVoltar.setText("Voltar");
        bttVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFuncionariosLayout = new javax.swing.GroupLayout(pnlFuncionarios);
        pnlFuncionarios.setLayout(pnlFuncionariosLayout);
        pnlFuncionariosLayout.setHorizontalGroup(
            pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                        .addComponent(txtProcurar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bttProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblProcurar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                        .addComponent(bttVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bttExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                        .addComponent(bttCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bttEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFuncionariosLayout.setVerticalGroup(
            pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblProcurar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblFuncionarios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttCadastrar)
                    .addComponent(bttEditar))
                .addGap(18, 18, 18)
                .addGroup(pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttVoltar)
                    .addComponent(bttExcluir))
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttCadastrarActionPerformed
        ManipularFuncionario cadastro = new ManipularFuncionario();
        cadastro.show();
        cadastro.inflateTable();

        cadastro.bttSalvar.addActionListener((ActionEvent e) -> {
            String msg = "";
            boolean validAndUniqueName = true;

            if (!cadastro.txtNome.getText().trim().isEmpty()) {
                for (Funcionario f : funcionarios) {
                    if (f.getNome().equals(cadastro.txtNome.getText())) {
                        validAndUniqueName = false;
                        msg = "Nome " + cadastro.txtNome.getText()
                                + " já cadastrado.\n";
                        cadastro.txtNome.setText("");
                    }
                }
            } else {
                validAndUniqueName = false;
                msg = "É necessário informar um nome.\n";
                cadastro.txtNome.setText("");
            }

            boolean atLeastOneCheckedItem = false;

            for (int i = 0; i < cadastro.servicos.size(); i++) {
                if ((boolean) cadastro.table.getValueAt(i, cadastro.INCLUIR)) {
                    atLeastOneCheckedItem = true;
                }
            }

            if (!atLeastOneCheckedItem) {
                msg += "É necessário incluir ao menos 1 (um) serviço.\n";
            }

            if (validAndUniqueName && atLeastOneCheckedItem) {
                Funcionario funcionario = new Funcionario(
                        cadastro.txtNome.getText());
                FuncionarioDAO dao = new FuncionarioDAO();
                funcionario.setId(dao.insert(funcionario));

                FuncionarioServicoDAO fsdao = new FuncionarioServicoDAO();

                for (int i = 0; i < cadastro.servicos.size(); i++) {
                    if ((boolean) cadastro.table
                            .getValueAt(i, cadastro.INCLUIR)) {
                        fsdao.insert(funcionario, cadastro.servicos.get(i));
                    }
                }

                funcionarios.add(funcionario);
                table.addRow(new Object[]{funcionario.getNome()});

                cadastro.dispose();

            } else {
                JOptionPane.showMessageDialog(cadastro, msg,
                        "Impossível finalizar o cadastro!",
                        JOptionPane.ERROR_MESSAGE);
            }
        });
    }//GEN-LAST:event_bttCadastrarActionPerformed

    private void bttEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttEditarActionPerformed
        Funcionario funcionario = funcionarios.get(position);
        ManipularFuncionario cadastro = new ManipularFuncionario();
        cadastro.show();
        cadastro.txtNome.setText(funcionario.getNome());
        cadastro.inflateTable();

        FuncionarioServicoDAO fsdao = new FuncionarioServicoDAO();
        ArrayList<Servico> servicosInDB =
                fsdao.queryForFuncionario(funcionario);
        
        for (int i = 0; i < cadastro.servicos.size(); i++) {
            for (Servico servico : servicosInDB) {
                if (cadastro.servicos.get(i).getId() == servico.getId()) {
                    cadastro.table.setValueAt(true, i, cadastro.INCLUIR);
                }
            }
        }

        cadastro.bttSalvar.addActionListener((ActionEvent e) -> {
            String msg = "";
            boolean validAndUniqueName = true;

            if (!cadastro.txtNome.getText().trim().isEmpty()) {
                for (Funcionario f : funcionarios) {
                    if (f.getNome().equals(cadastro.txtNome.getText())
                            && f.getId() != funcionario.getId()) {
                        validAndUniqueName = false;
                        msg = "Nome " + cadastro.txtNome.getText()
                                + " já cadastrado.\n";
                        cadastro.txtNome.setText(funcionario.getNome());
                    }
                }
            } else {
                validAndUniqueName = false;
                msg = "É necessário informar um nome.\n";
                cadastro.txtNome.setText(funcionario.getNome());
            }

            boolean atLeastOneCheckedItem = false;

            for (int i = 0; i < cadastro.servicos.size(); i++) {
                if ((boolean) cadastro.table.getValueAt(i, cadastro.INCLUIR)) {
                    atLeastOneCheckedItem = true;
                }
            }

            if (!atLeastOneCheckedItem) {
                msg += "É necessário incluir ao menos 1 (um) serviço.\n";
                
                for (int i = 0; i < cadastro.servicos.size(); i++) {
                    for (Servico servico : servicosInDB) {
                        if (cadastro.servicos.get(i)
                                .getId() == servico.getId()) {
                            cadastro.table
                                    .setValueAt(true, i, cadastro.INCLUIR);
                        }
                    }
                }
            }

            if (validAndUniqueName && atLeastOneCheckedItem) {
                if (!funcionario.getNome().equals(cadastro.txtNome.getText())) {
                    FuncionarioDAO dao = new FuncionarioDAO();
                    funcionario.setNome(cadastro.txtNome.getText());
                    dao.update(funcionario);
                    funcionarios.set(position, funcionario);
                    table.setValueAt(funcionario.getNome(), position, NOME);
                }

                for (int i = 0; i < cadastro.servicos.size(); i++) {
                    boolean persists = false;
                    
                    for (Servico servico : servicosInDB) {
                        if (cadastro.servicos.get(i)
                                .getId() == servico.getId()) {
                            persists = true;
                        }
                    }
                    
                    if ((boolean)cadastro.table
                            .getValueAt(i, cadastro.INCLUIR)) {
                        if (!persists) {
                            fsdao.insert(funcionario, cadastro.servicos.get(i));
                        }
                    } else {
                        if (persists) {
                            fsdao.delete(funcionario, cadastro.servicos.get(i));
                        }
                    }
                }

                cadastro.dispose();

            } else {
                JOptionPane.showMessageDialog(cadastro, msg,
                        "Impossível atualizar o cadastro!",
                        JOptionPane.ERROR_MESSAGE);
            }
        });
    }//GEN-LAST:event_bttEditarActionPerformed

    private void bttExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttExcluirActionPerformed
        String msg = "Você está prestes a excluir "
                + funcionarios.get(position).getNome() + " de seus funcionários!"
                + "\nDeseja mesmo excluí-lo?";

        int res = JOptionPane.showConfirmDialog(
                rootPane, msg, "Excluindo funcionário",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (res == JOptionPane.YES_OPTION) {
            FuncionarioDAO dao = new FuncionarioDAO();
            dao.delete(funcionarios.remove(position));
            table.removeRow(position);
            bttEditar.setEnabled(false);
            bttExcluir.setEnabled(false);
        }
    }//GEN-LAST:event_bttExcluirActionPerformed

    private void bttProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttProcurarActionPerformed
        if (txtProcurar.getText().trim().isEmpty()) {
            if (subList) {
                FuncionarioDAO dao = new FuncionarioDAO();
                funcionarios = dao.queryAll();
                inflateTable();
                subList = false;
            }
            txtProcurar.setText("");

        } else {
            FuncionarioDAO dao = new FuncionarioDAO();
            funcionarios = dao.queryForString(txtProcurar.getText());
            inflateTable();
            subList = true;
        }
    }//GEN-LAST:event_bttProcurarActionPerformed

    private void tblFuncionariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFuncionariosMouseClicked
        position = tblFuncionarios.getSelectedRow();

        if (position != -1) {
            bttEditar.setEnabled(true);
            bttExcluir.setEnabled(true);
        } else {
            bttEditar.setEnabled(false);
            bttExcluir.setEnabled(false);
        }
    }//GEN-LAST:event_tblFuncionariosMouseClicked

    private void bttVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttVoltarActionPerformed
        dispose();
    }//GEN-LAST:event_bttVoltarActionPerformed

    protected void inflateTable() {
        table = new DefaultTableModel(new String[]{""}, 0) {
            boolean[] canEdit = new boolean[]{false};

            @Override
            public boolean isCellEditable(int row, int column) {
                //return super.isCellEditable(row, column);
                return canEdit[column];
            }
        };
        tblFuncionarios.setModel(table);

        funcionarios.forEach((funcionario) -> {
            table.addRow(new Object[]{funcionario.getNome()});
        });

        bttEditar.setEnabled(false);
        bttExcluir.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerenciarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerenciarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerenciarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerenciarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GerenciarFuncionarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton bttCadastrar;
    protected javax.swing.JButton bttEditar;
    protected javax.swing.JButton bttExcluir;
    protected javax.swing.JButton bttProcurar;
    protected javax.swing.JButton bttVoltar;
    protected javax.swing.JLabel lblFuncionarios;
    protected javax.swing.JLabel lblProcurar;
    protected javax.swing.JLabel lblTitulo;
    protected javax.swing.JPanel pnlFuncionarios;
    protected javax.swing.JScrollPane scrFuncionarios;
    protected javax.swing.JTable tblFuncionarios;
    protected javax.swing.JTextField txtProcurar;
    // End of variables declaration//GEN-END:variables
}
